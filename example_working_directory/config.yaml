# Raw sequencing data parent directory containing one folder per flow cell, set if using .fast5 as input
storage_data_raw : data/

# Type of input being used. If .fast5 files not used, set to base_called and place .fastq.gz file in the sequences/ directory
# if .fast5 file used, set to 'raw' and place .fast5 files in /data/{run_name}/reads/ directory
input_type: 'raw'


# How to parse the folders found in 'storage_data_raw'. A 'reads' subfolder is
# expected containing the batches of fast5 raw reads.
# A runname pattern could be 20180101_FAH12345_FLO-MIN106_SQK-LSK109_WA01
# Field IDs are zero based.
storage_runname:
    delimiter: '_'
    field_ID: 1
    field_flowcell: 2
    field_kit: 3


# threads per processing batch, if given enough threads with -j n multiple
# batches run in parallel. Also used as resource for cluster jobs.
# Alignments need to be run with at least -j 2 for alignment and sam to bam
# conversion.
threads_basecalling: 4
threads_alignment: 3
threads_samtools : 1
threads_methylation: 4
threads_sv: 4
threads_demux: 4
threads_transcript: 4
threads_transcript_batch: 4
threads_asm: 4


# basecalling
# run basecalling and write predicted barcode into name of fastq/fasta output
basecalling_albacore_barcoding: false
# do not split output into pass and fail folders, report every sequence.
basecalling_albacore_disable_filtering: true
# command line flags directly passed to albacore e.g. --disable_pings
basecalling_albacore_flags: ''
# config file for guppy basecalling
basecalling_guppy_config: 'dna_r9.4.1_450bps_fast.cfg'
# quality qscore filter for guppy. 0 means all reads are written to the output
basecalling_guppy_qscore_filter: 0
# command line flags directly passed to guppy
basecalling_guppy_flags: ''
# list of guppy_basecall_server
# basecalling_guppy_server:
    # - 'localhost:9000'
# the flappie basecaller supports different models, check the docs for available options
basecalling_flappie_model: 'r941_5mC'
# command line flags directly passed to flappie
basecalling_flappie_flags: ''


# alignment flags for samtools e.g. -F 2304 for RNA alignment
alignment_samtools_flags: ''
# command line flags for minimap2 DNA alignment
## alignment_minimap2_flags: '-ax map-ont -L'                                              # default options, optimized for alignment to genome
alignment_minimap2_flags: '-a --for-only -A2 -B4 -O12 -E2 --secondary=no --end-bonus=13'   # options good for targeted sequencing, minimizes gaps defined in dms_tools2
# command line flags for graphmap2
alignment_graphmap2_flags: '-B 100'
# command line flags for ngmlr
alignment_ngmlr_flags: '-x ont --bam-fix'


# methylation detection
# Abs. log-likelyhood ratio to treat sites as methylated or unmethylated.
methylation_nanopolish_logp_threshold: 2.0
# Sequence quality threshold on CG sites to trust flappie methylation calls
methylation_flappie_qval_threshold: 3


# demux
demux_batch_size: 4000
demux_default: 'custom'
deepbinner_models:
    default: 'SQK-RBK004_read_starts'
    EXP-NBD103: 'EXP-NBD103_read_starts'
    SQK-RBK004: 'SQK-RBK004_read_starts'
demux_seq_workflow : 'custom'
demux_seq_tag : 'default'
demux_guppy_kits : 'EXP-NBD104'
demux_fasta: ref/barcodes_6_52.992.fa


# structural variation
# command line flags directly passed to the sniffles execution
sv_sniffles_flags: '-s 10 -l 30 -r 2000 --genotype'
sv_svim_flags: ''
sv_STRique_config: 'STRique.tsv'
sv_STRique_model: 'r9_4_450bps.mpi.model'
sv_STRique_mod_model: 'r9_4_450bps_mCpG.mpi.model'


# transcriptome
transcript_use_pychopper: True
transcript_spliced_bam2gff_flags: ''
transcript_cluster_gff_flags: ''
transcript_collapse_partials: ''
transcript_polish_clusters: ''


# Assembly
asm_genome_size : '48k'
asm_flye_preset : '--nano-raw'
asm_flye_flags : '--asm-coverage 35'
asm_wtdbg2_preset : 'ont'
asm_wtdbg2_flags : ''

# runs to be analyzed
runs:
    # tag, a short name to describe data, which will be present in all downstream file names
    trpB:
        # name of folder that holds raw data in a reads folder ( data/{runname}/reads/ )
        runname: P0
        # fasta file that contains reference sequence
        reference: ref/TrpB.fasta

        # list barcode types to be used for demuxing. Demux'd files are named according to these barcodes in the order provided
        #   if (1) both sequence context and fasta files are provided, (2) context can be found within the reference sequence,
        #   and (3) the fasta file can be located

        barcodeInfo: # different types of barcodes present within each sequence, defined by the sequence context around the barcode location
            fwd: 
                context: NNNNNNCTC          # copy and paste from reference fasta sequence. Include sufficient sequence on one or both sides to distinguish from other barcodes
                fasta: ref/barcodes_6_52_992.fa
                # hammingDistance: 0          # allowable hamming distance from true barcode. If any two of barcodes within provided fasta file are within this hamming distance from each other, demultiplexing will fail. Default, 0.
                reverseComplement: False    # set to True if barcodes in fasta file are defined as 5' to 3'. Default, False.
            rvs:
                context: TAANNNNNN  
                hammingDistance: 0
                fasta: ref/barcodes_6_52_992.fa
                reverseComplement: True
            # lineage: # pre-encoded barcode, not added by primers. Uses a fasta file, with location defined by `fasta`, to identify barcodes. If the file does not already exist, it will first be created and filled with barcodes, and given names that include the number of sequences with each barcode
            #     context: TGNNNNNNNNAA
            #     fasta: ref/exampleBarcodes.fasta
            #     reverseComplement: False
        barcodeGroups:  # names demultiplexed files according to given name instead of using name(s) of individual barcodes. groups must use the same pattern of barcode types.
                        #   For instance, if one group contains barcode designations for two barcodes types (e.g., fwd and rvs), then all other groups must contain barcode designations for those two barcode types
            # ex1:
            #     fwd: barcode1
            #     rvs: barcode2
            # ex2:
            #     fwd: barcode1
            #     rvs: barcode3
            WT-Y391:
                fwd: Barcode1
                rvs: Barcode5
            SAC6-611-REV1-633-Y392:
                fwd: Barcode2
                rvs: Barcode6
            REV1-611-PSP2-633-Y393:
                fwd: Barcode3
                rvs: Barcode7
            SAC6-611-PSP2-633-Y394:
                fwd: Barcode4
                rvs: Barcode8
            SAC6-611-RAD27-633-Y396:
                fwd: Barcode25
                rvs: Barcode29
            background:
                fwd: Barcode26
                rvs: Barcode30